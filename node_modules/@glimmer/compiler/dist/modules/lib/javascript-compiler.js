import { assert } from "@glimmer/util";
import { Stack, DictSet } from "@glimmer/util";
import { Statements, Ops } from '@glimmer/wire-format';
export class Block {
    constructor() {
        this.type = "block";
        this.statements = [];
        this.positionals = [];
    }
    toJSON() {
        return {
            statements: this.statements,
            locals: this.positionals
        };
    }
    push(statement) {
        this.statements.push(statement);
    }
}
export class TemplateBlock extends Block {
    constructor() {
        super(...arguments);
        this.type = "template";
        this.yields = new DictSet();
        this.named = new DictSet();
        this.blocks = [];
        this.hasPartials = false;
    }
    toJSON() {
        return {
            statements: this.statements,
            locals: this.positionals,
            named: this.named.toArray(),
            yields: this.yields.toArray(),
            hasPartials: this.hasPartials
        };
    }
}
export class ComponentBlock extends Block {
    constructor() {
        super(...arguments);
        this.type = "component";
        this.attributes = [];
        this.arguments = [];
        this.inParams = true;
    }
    push(statement) {
        if (this.inParams) {
            if (Statements.isFlushElement(statement)) {
                this.inParams = false;
            }
            else if (Statements.isArgument(statement)) {
                this.arguments.push(statement);
            }
            else if (Statements.isAttribute(statement)) {
                this.attributes.push(statement);
            }
            else if (Statements.isModifier(statement)) {
                throw new Error('Compile Error: Element modifiers are not allowed in components');
            }
            else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        }
        else {
            this.statements.push(statement);
        }
    }
    toJSON() {
        let args = this.arguments;
        let keys = args.map(arg => arg[1]);
        let values = args.map(arg => arg[2]);
        return {
            attrs: this.attributes,
            args: [keys, values],
            locals: this.positionals,
            statements: this.statements
        };
    }
}
export class Template {
    constructor(meta) {
        this.meta = meta;
        this.block = new TemplateBlock();
    }
    toJSON() {
        return {
            block: this.block.toJSON(),
            meta: this.meta
        };
    }
}
export default class JavaScriptCompiler {
    constructor(opcodes, meta) {
        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(meta);
    }
    static process(opcodes, meta) {
        let compiler = new JavaScriptCompiler(opcodes, meta);
        return compiler.process();
    }
    process() {
        this.opcodes.forEach(([opcode, ...args]) => {
            if (!this[opcode]) {
                throw new Error(`unimplemented ${opcode} on JavaScriptCompiler`);
            }
            this[opcode](...args);
        });
        return this.template;
    }
    /// Nesting
    startBlock([program]) {
        let block = new Block();
        block.positionals = program.blockParams;
        this.blocks.push(block);
    }
    endBlock() {
        let { template, blocks } = this;
        template.block.blocks.push(blocks.pop().toJSON());
    }
    startProgram() {
        this.blocks.push(this.template.block);
    }
    endProgram() {
    }
    /// Statements
    text(content) {
        this.push([Ops.Text, content]);
    }
    append(trusted) {
        this.push([Ops.Append, this.popValue(), trusted]);
    }
    comment(value) {
        this.push([Ops.Comment, value]);
    }
    modifier(path) {
        let params = this.popValue();
        let hash = this.popValue();
        this.push([Ops.Modifier, path, params, hash]);
    }
    block(path, template, inverse) {
        let params = this.popValue();
        let hash = this.popValue();
        let blocks = this.template.block.blocks;
        assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');
        this.push([Ops.Block, path, params, hash, blocks[template], blocks[inverse]]);
    }
    openElement(tag, blockParams) {
        if (tag.indexOf('-') !== -1) {
            this.startComponent(blockParams);
        }
        else {
            this.push([Ops.OpenElement, tag, blockParams]);
        }
    }
    flushElement() {
        this.push([Ops.FlushElement]);
    }
    closeElement(tag) {
        if (tag.indexOf('-') !== -1) {
            let component = this.endComponent();
            this.push([Ops.Component, tag, component]);
        }
        else {
            this.push([Ops.CloseElement]);
        }
    }
    staticAttr(name, namespace) {
        let value = this.popValue();
        this.push([Ops.StaticAttr, name, value, namespace]);
    }
    dynamicAttr(name, namespace) {
        let value = this.popValue();
        this.push([Ops.DynamicAttr, name, value, namespace]);
    }
    trustingAttr(name, namespace) {
        let value = this.popValue();
        this.push([Ops.TrustingAttr, name, value, namespace]);
    }
    staticArg(name) {
        let value = this.popValue();
        this.push([Ops.StaticArg, name.slice(1), value]);
    }
    dynamicArg(name) {
        let value = this.popValue();
        this.push([Ops.DynamicArg, name.slice(1), value]);
    }
    yield(to) {
        let params = this.popValue();
        this.push([Ops.Yield, to, params]);
        this.template.block.yields.add(to);
    }
    debugger() {
        this.push([Ops.Debugger, null, null]);
    }
    hasBlock(name) {
        this.pushValue([Ops.HasBlock, name]);
        this.template.block.yields.add(name);
    }
    hasBlockParams(name) {
        this.pushValue([Ops.HasBlockParams, name]);
        this.template.block.yields.add(name);
    }
    partial() {
        let params = this.popValue();
        this.push([Ops.Partial, params[0]]);
        this.template.block.hasPartials = true;
    }
    /// Expressions
    literal(value) {
        if (value === undefined) {
            this.pushValue([Ops.Undefined]);
        }
        else {
            this.pushValue(value);
        }
    }
    unknown(path) {
        this.pushValue([Ops.Unknown, path]);
    }
    arg(path) {
        this.template.block.named.add(path[0]);
        this.pushValue([Ops.Arg, path]);
    }
    get(path) {
        this.pushValue([Ops.Get, path]);
    }
    concat() {
        this.pushValue([Ops.Concat, this.popValue()]);
    }
    helper(path) {
        let params = this.popValue();
        let hash = this.popValue();
        this.pushValue([Ops.Helper, path, params, hash]);
    }
    /// Stack Management Opcodes
    startComponent(blockParams) {
        let component = new ComponentBlock();
        component.positionals = blockParams;
        this.blocks.push(component);
    }
    endComponent() {
        let component = this.blocks.pop();
        assert(component.type === 'component', "Compiler bug: endComponent() should end a component");
        return component.toJSON();
    }
    prepareArray(size) {
        let values = [];
        for (let i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    }
    prepareObject(size) {
        assert(this.values.length >= size, `Expected ${size} values on the stack, found ${this.values.length}`);
        let keys = new Array(size);
        let values = new Array(size);
        for (let i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    }
    /// Utilities
    push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.blocks.current.push(args);
    }
    pushValue(val) {
        this.values.push(val);
    }
    popValue() {
        assert(this.values.length, "No expression found on stack");
        return this.values.pop();
    }
}
//# sourceMappingURL=data:application/json;base64,