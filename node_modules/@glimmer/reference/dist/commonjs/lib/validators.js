"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONSTANT = 0;
exports.INITIAL = 1;
exports.VOLATILE = NaN;
class RevisionTag {
    validate(snapshot) {
        return this.value() === snapshot;
    }
}
exports.RevisionTag = RevisionTag;
let $REVISION = exports.INITIAL;
class DirtyableTag extends RevisionTag {
    constructor(revision = $REVISION) {
        super();
        this.revision = revision;
    }
    value() {
        return this.revision;
    }
    dirty() {
        this.revision = ++$REVISION;
    }
}
exports.DirtyableTag = DirtyableTag;
function combineTagged(tagged) {
    let optimized = [];
    for (let i = 0, l = tagged.length; i < l; i++) {
        let tag = tagged[i].tag;
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag === exports.CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
exports.combineTagged = combineTagged;
function combineSlice(slice) {
    let optimized = [];
    let node = slice.head();
    while (node !== null) {
        let tag = node.tag;
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag !== exports.CONSTANT_TAG)
            optimized.push(tag);
        node = slice.nextNode(node);
    }
    return _combine(optimized);
}
exports.combineSlice = combineSlice;
function combine(tags) {
    let optimized = [];
    for (let i = 0, l = tags.length; i < l; i++) {
        let tag = tags[i];
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag === exports.CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
exports.combine = combine;
function _combine(tags) {
    switch (tags.length) {
        case 0:
            return exports.CONSTANT_TAG;
        case 1:
            return tags[0];
        case 2:
            return new TagsPair(tags[0], tags[1]);
        default:
            return new TagsCombinator(tags);
    }
    ;
}
class CachedTag extends RevisionTag {
    constructor() {
        super(...arguments);
        this.lastChecked = null;
        this.lastValue = null;
    }
    value() {
        let { lastChecked, lastValue } = this;
        if (lastChecked !== $REVISION) {
            this.lastChecked = $REVISION;
            this.lastValue = lastValue = this.compute();
        }
        return this.lastValue;
    }
    invalidate() {
        this.lastChecked = null;
    }
}
exports.CachedTag = CachedTag;
class TagsPair extends CachedTag {
    constructor(first, second) {
        super();
        this.first = first;
        this.second = second;
    }
    compute() {
        return Math.max(this.first.value(), this.second.value());
    }
}
class TagsCombinator extends CachedTag {
    constructor(tags) {
        super();
        this.tags = tags;
    }
    compute() {
        let { tags } = this;
        let max = -1;
        for (let i = 0; i < tags.length; i++) {
            let value = tags[i].value();
            max = Math.max(value, max);
        }
        return max;
    }
}
class UpdatableTag extends CachedTag {
    constructor(tag) {
        super();
        this.tag = tag;
        this.lastUpdated = exports.INITIAL;
    }
    compute() {
        return Math.max(this.lastUpdated, this.tag.value());
    }
    update(tag) {
        if (tag !== this.tag) {
            this.tag = tag;
            this.lastUpdated = $REVISION;
            this.invalidate();
        }
    }
}
exports.UpdatableTag = UpdatableTag;
//////////
exports.CONSTANT_TAG = new (class ConstantTag extends RevisionTag {
    value() {
        return exports.CONSTANT;
    }
});
exports.VOLATILE_TAG = new (class VolatileTag extends RevisionTag {
    value() {
        return exports.VOLATILE;
    }
});
exports.CURRENT_TAG = new (class CurrentTag extends DirtyableTag {
    value() {
        return $REVISION;
    }
});
class CachedReference {
    constructor() {
        this.lastRevision = null;
        this.lastValue = null;
    }
    value() {
        let { tag, lastRevision, lastValue } = this;
        if (!lastRevision || !tag.validate(lastRevision)) {
            lastValue = this.lastValue = this.compute();
            this.lastRevision = tag.value();
        }
        return lastValue;
    }
    invalidate() {
        this.lastRevision = null;
    }
}
exports.CachedReference = CachedReference;
class MapperReference extends CachedReference {
    constructor(reference, mapper) {
        super();
        this.tag = reference.tag;
        this.reference = reference;
        this.mapper = mapper;
    }
    compute() {
        let { reference, mapper } = this;
        return mapper(reference.value());
    }
}
function map(reference, mapper) {
    return new MapperReference(reference, mapper);
}
exports.map = map;
//////////
class ReferenceCache {
    constructor(reference) {
        this.lastValue = null;
        this.lastRevision = null;
        this.initialized = false;
        this.tag = reference.tag;
        this.reference = reference;
    }
    peek() {
        if (!this.initialized) {
            return this.initialize();
        }
        return this.lastValue;
    }
    revalidate() {
        if (!this.initialized) {
            return this.initialize();
        }
        let { reference, lastRevision } = this;
        let tag = reference.tag;
        if (tag.validate(lastRevision))
            return NOT_MODIFIED;
        this.lastRevision = tag.value();
        let { lastValue } = this;
        let value = reference.value();
        if (value === lastValue)
            return NOT_MODIFIED;
        this.lastValue = value;
        return value;
    }
    initialize() {
        let { reference } = this;
        let value = this.lastValue = reference.value();
        this.lastRevision = reference.tag.value();
        this.initialized = true;
        return value;
    }
}
exports.ReferenceCache = ReferenceCache;
const NOT_MODIFIED = "adb3b78e-3d22-4e4b-877a-6317c2c5c145";
function isModified(value) {
    return value !== NOT_MODIFIED;
}
exports.isModified = isModified;
//# sourceMappingURL=data:application/json;base64,