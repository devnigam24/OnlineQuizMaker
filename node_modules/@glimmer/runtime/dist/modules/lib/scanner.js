import { CompiledProgram, CompiledBlock } from './compiled/blocks';
import { builder } from './compiler';
import * as WireFormat from '@glimmer/wire-format';
import { entryPoint as entryPointTable, layout as layoutTable, block as blockTable } from './symbol-table';
import { STATEMENTS } from './syntax/functions';
import { SPECIALIZE } from './syntax/specialize';
export function compileStatement(statement, builder) {
    let refined = SPECIALIZE.specialize(statement, builder.symbolTable);
    STATEMENTS.compile(refined, builder);
}
export class Template {
    constructor(statements, symbolTable) {
        this.statements = statements;
        this.symbolTable = symbolTable;
    }
}
export class Layout extends Template {
}
export class EntryPoint extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = builder(env, table);
            for (let i = 0; i < this.statements.length; i++) {
                let statement = this.statements[i];
                let refined = SPECIALIZE.specialize(statement, table);
                STATEMENTS.compile(refined, b);
            }
            compiled = this.compiled = new CompiledProgram(b.start, b.end, this.symbolTable.size);
        }
        return compiled;
    }
}
export class InlineBlock extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    splat(builder) {
        let table = builder.symbolTable;
        let locals = table.getSymbols().locals;
        if (locals) {
            builder.pushChildScope();
            builder.bindPositionalArgsForLocals(locals);
        }
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let refined = SPECIALIZE.specialize(statement, table);
            STATEMENTS.compile(refined, builder);
        }
        if (locals) {
            builder.popScope();
        }
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = builder(env, table);
            this.splat(b);
            compiled = this.compiled = new CompiledBlock(b.start, b.end);
        }
        return compiled;
    }
}
export class PartialBlock extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = builder(env, table);
            for (let i = 0; i < this.statements.length; i++) {
                let statement = this.statements[i];
                let refined = SPECIALIZE.specialize(statement, table);
                STATEMENTS.compile(refined, b);
            }
            compiled = this.compiled = new CompiledProgram(b.start, b.end, table.size);
        }
        return compiled;
    }
}
export default class Scanner {
    constructor(block, meta, env) {
        this.block = block;
        this.meta = meta;
        this.env = env;
    }
    scanEntryPoint() {
        let { block, meta } = this;
        let symbolTable = entryPointTable(meta);
        let child = scanBlock(block, symbolTable, this.env);
        return new EntryPoint(child.statements, symbolTable);
    }
    scanLayout() {
        let { block, meta } = this;
        let { named, yields, hasPartials } = block;
        let symbolTable = layoutTable(meta, named, yields, hasPartials);
        let child = scanBlock(block, symbolTable, this.env);
        return new Layout(child.statements, symbolTable);
    }
    scanPartial(symbolTable) {
        let { block } = this;
        let child = scanBlock(block, symbolTable, this.env);
        return new PartialBlock(child.statements, symbolTable);
    }
}
export function scanBlock({ statements }, symbolTable, env) {
    return new RawInlineBlock(env, symbolTable, statements).scan();
}
export var BaselineSyntax;
(function (BaselineSyntax) {
    const { Ops } = WireFormat;
    BaselineSyntax.isScannedComponent = WireFormat.is(Ops.ScannedComponent);
    BaselineSyntax.isPrimitiveElement = WireFormat.is(Ops.OpenPrimitiveElement);
    BaselineSyntax.isOptimizedAppend = WireFormat.is(Ops.OptimizedAppend);
    BaselineSyntax.isUnoptimizedAppend = WireFormat.is(Ops.UnoptimizedAppend);
    BaselineSyntax.isAnyAttr = WireFormat.is(Ops.AnyDynamicAttr);
    BaselineSyntax.isStaticPartial = WireFormat.is(Ops.StaticPartial);
    BaselineSyntax.isDynamicPartial = WireFormat.is(Ops.DynamicPartial);
    BaselineSyntax.isFunctionExpression = WireFormat.is(Ops.Function);
    BaselineSyntax.isNestedBlock = WireFormat.is(Ops.NestedBlock);
    BaselineSyntax.isScannedBlock = WireFormat.is(Ops.ScannedBlock);
    BaselineSyntax.isDebugger = WireFormat.is(Ops.Debugger);
    var NestedBlock;
    (function (NestedBlock) {
        function defaultBlock(sexp) {
            return sexp[4];
        }
        NestedBlock.defaultBlock = defaultBlock;
        function inverseBlock(sexp) {
            return sexp[5];
        }
        NestedBlock.inverseBlock = inverseBlock;
        function params(sexp) {
            return sexp[2];
        }
        NestedBlock.params = params;
        function hash(sexp) {
            return sexp[3];
        }
        NestedBlock.hash = hash;
    })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
})(BaselineSyntax || (BaselineSyntax = {}));
const { Ops } = WireFormat;
export class RawInlineBlock {
    constructor(env, table, statements) {
        this.env = env;
        this.table = table;
        this.statements = statements;
    }
    scan() {
        let buffer = [];
        this.specializeStatements(this.statements, buffer);
        return new InlineBlock(buffer, this.table);
    }
    specializeStatements(statements, buffer) {
        for (let i = 0; i < statements.length; i++) {
            let statement = statements[i];
            this.specializeStatement(statement, buffer);
        }
    }
    specializeStatement(statement, buffer) {
        if (WireFormat.Statements.isBlock(statement)) {
            buffer.push(this.specializeBlock(statement));
        }
        else if (WireFormat.Statements.isComponent(statement)) {
            buffer.push(...this.specializeComponent(statement));
        }
        else {
            buffer.push(statement);
        }
    }
    specializeBlock(block) {
        let [, path, params, hash, template, inverse] = block;
        return [Ops.ScannedBlock, path, params, hash, this.child(template), this.child(inverse)];
    }
    specializeComponent(sexp) {
        let [, tag, component] = sexp;
        if (this.env.hasComponentDefinition(tag, this.table)) {
            let child = this.child(component);
            let attrs = new RawInlineBlock(this.env, this.table, component.attrs);
            return [[Ops.ScannedComponent, tag, attrs, component.args, child]];
        }
        else {
            let buff = [];
            buff.push([Ops.OpenElement, tag, []]);
            this.specializeStatements(component.attrs, buff);
            buff.push([Ops.FlushElement]);
            this.specializeStatements(component.statements, buff);
            buff.push([Ops.CloseElement]);
            return buff;
        }
    }
    child(block) {
        if (!block)
            return null;
        let table = blockTable(this.table, block.locals);
        return new RawInlineBlock(this.env, table, block.statements);
    }
}
//# sourceMappingURL=data:application/json;base64,