import { CompiledExpression } from '../expressions';
import VM from '../../vm/append';
import { PathReference, RevisionTag } from '@glimmer/reference';
import { Opaque } from '@glimmer/util';
export declare class CompiledPositionalArgs {
    values: ReadonlyArray<CompiledExpression<Opaque>>;
    static create(values: CompiledExpression<Opaque>[]): CompiledPositionalArgs;
    static empty(): CompiledPositionalArgs;
    length: number;
    constructor(values: ReadonlyArray<CompiledExpression<Opaque>>);
    evaluate(vm: VM): EvaluatedPositionalArgs;
    toJSON(): string;
}
export declare const COMPILED_EMPTY_POSITIONAL_ARGS: CompiledPositionalArgs;
export declare class EvaluatedPositionalArgs {
    values: ReadonlyArray<PathReference<Opaque>>;
    static create(values: ReadonlyArray<PathReference<Opaque>>): EvaluatedPositionalArgs;
    static empty(): EvaluatedPositionalArgs;
    tag: RevisionTag;
    length: number;
    constructor(values: ReadonlyArray<PathReference<Opaque>>);
    at(index: number): PathReference<Opaque>;
    value(): ReadonlyArray<Opaque>;
}
export declare const EVALUATED_EMPTY_POSITIONAL_ARGS: EvaluatedPositionalArgs;
