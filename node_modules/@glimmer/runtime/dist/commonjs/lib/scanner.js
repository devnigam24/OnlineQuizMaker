"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blocks_1 = require("./compiled/blocks");
const compiler_1 = require("./compiler");
const WireFormat = require("@glimmer/wire-format");
const symbol_table_1 = require("./symbol-table");
const functions_1 = require("./syntax/functions");
const specialize_1 = require("./syntax/specialize");
function compileStatement(statement, builder) {
    let refined = specialize_1.SPECIALIZE.specialize(statement, builder.symbolTable);
    functions_1.STATEMENTS.compile(refined, builder);
}
exports.compileStatement = compileStatement;
class Template {
    constructor(statements, symbolTable) {
        this.statements = statements;
        this.symbolTable = symbolTable;
    }
}
exports.Template = Template;
class Layout extends Template {
}
exports.Layout = Layout;
class EntryPoint extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = compiler_1.builder(env, table);
            for (let i = 0; i < this.statements.length; i++) {
                let statement = this.statements[i];
                let refined = specialize_1.SPECIALIZE.specialize(statement, table);
                functions_1.STATEMENTS.compile(refined, b);
            }
            compiled = this.compiled = new blocks_1.CompiledProgram(b.start, b.end, this.symbolTable.size);
        }
        return compiled;
    }
}
exports.EntryPoint = EntryPoint;
class InlineBlock extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    splat(builder) {
        let table = builder.symbolTable;
        let locals = table.getSymbols().locals;
        if (locals) {
            builder.pushChildScope();
            builder.bindPositionalArgsForLocals(locals);
        }
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, builder);
        }
        if (locals) {
            builder.popScope();
        }
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = compiler_1.builder(env, table);
            this.splat(b);
            compiled = this.compiled = new blocks_1.CompiledBlock(b.start, b.end);
        }
        return compiled;
    }
}
exports.InlineBlock = InlineBlock;
class PartialBlock extends Template {
    constructor() {
        super(...arguments);
        this.compiled = null;
    }
    compile(env) {
        let compiled = this.compiled;
        if (!compiled) {
            let table = this.symbolTable;
            let b = compiler_1.builder(env, table);
            for (let i = 0; i < this.statements.length; i++) {
                let statement = this.statements[i];
                let refined = specialize_1.SPECIALIZE.specialize(statement, table);
                functions_1.STATEMENTS.compile(refined, b);
            }
            compiled = this.compiled = new blocks_1.CompiledProgram(b.start, b.end, table.size);
        }
        return compiled;
    }
}
exports.PartialBlock = PartialBlock;
class Scanner {
    constructor(block, meta, env) {
        this.block = block;
        this.meta = meta;
        this.env = env;
    }
    scanEntryPoint() {
        let { block, meta } = this;
        let symbolTable = symbol_table_1.entryPoint(meta);
        let child = scanBlock(block, symbolTable, this.env);
        return new EntryPoint(child.statements, symbolTable);
    }
    scanLayout() {
        let { block, meta } = this;
        let { named, yields, hasPartials } = block;
        let symbolTable = symbol_table_1.layout(meta, named, yields, hasPartials);
        let child = scanBlock(block, symbolTable, this.env);
        return new Layout(child.statements, symbolTable);
    }
    scanPartial(symbolTable) {
        let { block } = this;
        let child = scanBlock(block, symbolTable, this.env);
        return new PartialBlock(child.statements, symbolTable);
    }
}
exports.default = Scanner;
function scanBlock({ statements }, symbolTable, env) {
    return new RawInlineBlock(env, symbolTable, statements).scan();
}
exports.scanBlock = scanBlock;
var BaselineSyntax;
(function (BaselineSyntax) {
    const { Ops } = WireFormat;
    BaselineSyntax.isScannedComponent = WireFormat.is(Ops.ScannedComponent);
    BaselineSyntax.isPrimitiveElement = WireFormat.is(Ops.OpenPrimitiveElement);
    BaselineSyntax.isOptimizedAppend = WireFormat.is(Ops.OptimizedAppend);
    BaselineSyntax.isUnoptimizedAppend = WireFormat.is(Ops.UnoptimizedAppend);
    BaselineSyntax.isAnyAttr = WireFormat.is(Ops.AnyDynamicAttr);
    BaselineSyntax.isStaticPartial = WireFormat.is(Ops.StaticPartial);
    BaselineSyntax.isDynamicPartial = WireFormat.is(Ops.DynamicPartial);
    BaselineSyntax.isFunctionExpression = WireFormat.is(Ops.Function);
    BaselineSyntax.isNestedBlock = WireFormat.is(Ops.NestedBlock);
    BaselineSyntax.isScannedBlock = WireFormat.is(Ops.ScannedBlock);
    BaselineSyntax.isDebugger = WireFormat.is(Ops.Debugger);
    var NestedBlock;
    (function (NestedBlock) {
        function defaultBlock(sexp) {
            return sexp[4];
        }
        NestedBlock.defaultBlock = defaultBlock;
        function inverseBlock(sexp) {
            return sexp[5];
        }
        NestedBlock.inverseBlock = inverseBlock;
        function params(sexp) {
            return sexp[2];
        }
        NestedBlock.params = params;
        function hash(sexp) {
            return sexp[3];
        }
        NestedBlock.hash = hash;
    })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
})(BaselineSyntax = exports.BaselineSyntax || (exports.BaselineSyntax = {}));
const { Ops } = WireFormat;
class RawInlineBlock {
    constructor(env, table, statements) {
        this.env = env;
        this.table = table;
        this.statements = statements;
    }
    scan() {
        let buffer = [];
        this.specializeStatements(this.statements, buffer);
        return new InlineBlock(buffer, this.table);
    }
    specializeStatements(statements, buffer) {
        for (let i = 0; i < statements.length; i++) {
            let statement = statements[i];
            this.specializeStatement(statement, buffer);
        }
    }
    specializeStatement(statement, buffer) {
        if (WireFormat.Statements.isBlock(statement)) {
            buffer.push(this.specializeBlock(statement));
        }
        else if (WireFormat.Statements.isComponent(statement)) {
            buffer.push(...this.specializeComponent(statement));
        }
        else {
            buffer.push(statement);
        }
    }
    specializeBlock(block) {
        let [, path, params, hash, template, inverse] = block;
        return [Ops.ScannedBlock, path, params, hash, this.child(template), this.child(inverse)];
    }
    specializeComponent(sexp) {
        let [, tag, component] = sexp;
        if (this.env.hasComponentDefinition(tag, this.table)) {
            let child = this.child(component);
            let attrs = new RawInlineBlock(this.env, this.table, component.attrs);
            return [[Ops.ScannedComponent, tag, attrs, component.args, child]];
        }
        else {
            let buff = [];
            buff.push([Ops.OpenElement, tag, []]);
            this.specializeStatements(component.attrs, buff);
            buff.push([Ops.FlushElement]);
            this.specializeStatements(component.statements, buff);
            buff.push([Ops.CloseElement]);
            return buff;
        }
    }
    child(block) {
        if (!block)
            return null;
        let table = symbol_table_1.block(this.table, block.locals);
        return new RawInlineBlock(this.env, table, block.statements);
    }
}
exports.RawInlineBlock = RawInlineBlock;
//# sourceMappingURL=data:application/json;base64,