"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const environment_1 = require("../environment");
const util_1 = require("@glimmer/util");
const reference_1 = require("@glimmer/reference");
const vm_1 = require("../compiled/opcodes/vm");
const update_1 = require("./update");
const render_result_1 = require("./render-result");
const frame_1 = require("./frame");
const opcodes_1 = require("../opcodes");
class VM {
    constructor(env, scope, dynamicScope, elementStack) {
        this.env = env;
        this.elementStack = elementStack;
        this.dynamicScopeStack = new util_1.Stack();
        this.scopeStack = new util_1.Stack();
        this.updatingOpcodeStack = new util_1.Stack();
        this.cacheGroups = new util_1.Stack();
        this.listBlockStack = new util_1.Stack();
        this.frame = new frame_1.FrameStack();
        this.env = env;
        this.constants = env.constants;
        this.elementStack = elementStack;
        this.scopeStack.push(scope);
        this.dynamicScopeStack.push(dynamicScope);
    }
    static initial(env, self, dynamicScope, elementStack, compiledProgram) {
        let { symbols: size, start, end } = compiledProgram;
        let scope = environment_1.Scope.root(self, size);
        let vm = new VM(env, scope, dynamicScope, elementStack);
        vm.prepare(start, end);
        return vm;
    }
    capture() {
        return {
            env: this.env,
            scope: this.scope(),
            dynamicScope: this.dynamicScope(),
            frame: this.frame.capture()
        };
    }
    goto(ip) {
        this.frame.goto(ip);
    }
    beginCacheGroup() {
        this.cacheGroups.push(this.updating().tail());
    }
    commitCacheGroup() {
        //        JumpIfNotModified(END)
        //        (head)
        //        (....)
        //        (tail)
        //        DidModify
        // END:   Noop
        let END = new vm_1.LabelOpcode("END");
        let opcodes = this.updating();
        let marker = this.cacheGroups.pop();
        let head = marker ? opcodes.nextNode(marker) : opcodes.head();
        let tail = opcodes.tail();
        let tag = reference_1.combineSlice(new util_1.ListSlice(head, tail));
        let guard = new vm_1.JumpIfNotModifiedOpcode(tag, END);
        opcodes.insertBefore(guard, head);
        opcodes.append(new vm_1.DidModifyOpcode(guard));
        opcodes.append(END);
    }
    enter(start, end) {
        let updating = new util_1.LinkedList();
        let tracker = this.stack().pushUpdatableBlock();
        let state = this.capture();
        let tryOpcode = new update_1.TryOpcode(start, end, state, tracker, updating);
        this.didEnter(tryOpcode, updating);
    }
    enterWithKey(key, start, end) {
        let updating = new util_1.LinkedList();
        let tracker = this.stack().pushUpdatableBlock();
        let state = this.capture();
        let tryOpcode = new update_1.TryOpcode(start, end, state, tracker, updating);
        this.listBlock().map[key] = tryOpcode;
        this.didEnter(tryOpcode, updating);
    }
    enterList(start, end) {
        let updating = new util_1.LinkedList();
        let tracker = this.stack().pushBlockList(updating);
        let state = this.capture();
        let artifacts = this.frame.getIterator().artifacts;
        let opcode = new update_1.ListBlockOpcode(start, end, state, tracker, updating, artifacts);
        this.listBlockStack.push(opcode);
        this.didEnter(opcode, updating);
    }
    didEnter(opcode, updating) {
        this.updateWith(opcode);
        this.updatingOpcodeStack.push(updating);
    }
    exit() {
        this.stack().popBlock();
        this.updatingOpcodeStack.pop();
        let parent = this.updating().tail();
        parent.didInitializeChildren();
    }
    exitList() {
        this.exit();
        this.listBlockStack.pop();
    }
    updateWith(opcode) {
        this.updating().append(opcode);
    }
    listBlock() {
        return util_1.expect(this.listBlockStack.current, 'expected a list block');
    }
    updating() {
        return util_1.expect(this.updatingOpcodeStack.current, 'expected updating opcode on the updating opcode stack');
    }
    stack() {
        return this.elementStack;
    }
    scope() {
        return util_1.expect(this.scopeStack.current, 'expected scope on the scope stack');
    }
    dynamicScope() {
        return util_1.expect(this.dynamicScopeStack.current, 'expected dynamic scope on the dynamic scope stack');
    }
    pushFrame(block, args, callerScope) {
        this.frame.push(block.start, block.end);
        if (args)
            this.frame.setArgs(args);
        if (args && args.blocks)
            this.frame.setBlocks(args.blocks);
        if (callerScope)
            this.frame.setCallerScope(callerScope);
    }
    pushComponentFrame(layout, args, callerScope, component, manager, shadow) {
        this.frame.push(layout.start, layout.end, component, manager, shadow);
        if (args)
            this.frame.setArgs(args);
        if (args && args.blocks)
            this.frame.setBlocks(args.blocks);
        if (callerScope)
            this.frame.setCallerScope(callerScope);
    }
    pushEvalFrame(start, end) {
        this.frame.push(start, end);
    }
    pushChildScope() {
        this.scopeStack.push(this.scope().child());
    }
    pushCallerScope() {
        this.scopeStack.push(util_1.expect(this.scope().getCallerScope(), 'pushCallerScope is called when a caller scope is present'));
    }
    pushDynamicScope() {
        let child = this.dynamicScope().child();
        this.dynamicScopeStack.push(child);
        return child;
    }
    pushRootScope(self, size) {
        let scope = environment_1.Scope.root(self, size);
        this.scopeStack.push(scope);
        return scope;
    }
    popScope() {
        this.scopeStack.pop();
    }
    popDynamicScope() {
        this.dynamicScopeStack.pop();
    }
    newDestroyable(d) {
        this.stack().newDestroyable(d);
    }
    /// SCOPE HELPERS
    getSelf() {
        return this.scope().getSelf();
    }
    referenceForSymbol(symbol) {
        return this.scope().getSymbol(symbol);
    }
    getArgs() {
        return this.frame.getArgs();
    }
    /// EXECUTION
    resume(start, end, frame) {
        return this.execute(start, end, vm => vm.frame.restore(frame));
    }
    execute(start, end, initialize) {
        this.prepare(start, end, initialize);
        let result;
        while (true) {
            result = this.next();
            if (result.done)
                break;
        }
        return result.value;
    }
    prepare(start, end, initialize) {
        let { elementStack, frame, updatingOpcodeStack } = this;
        elementStack.pushSimpleBlock();
        updatingOpcodeStack.push(new util_1.LinkedList());
        frame.push(start, end);
        if (initialize)
            initialize(this);
    }
    next() {
        let { frame, env, updatingOpcodeStack, elementStack } = this;
        let opcode;
        if (opcode = frame.nextStatement(env)) {
            opcodes_1.APPEND_OPCODES.evaluate(this, opcode);
            return { done: false, value: null };
        }
        return {
            done: true,
            value: new render_result_1.default(env, util_1.expect(updatingOpcodeStack.pop(), 'there should be a final updating opcode stack'), elementStack.popBlock())
        };
    }
    evaluateOpcode(opcode) {
        opcodes_1.APPEND_OPCODES.evaluate(this, opcode);
    }
    // Make sure you have opcodes that push and pop a scope around this opcode
    // if you need to change the scope.
    invokeBlock(block, args) {
        let compiled = block.compile(this.env);
        this.pushFrame(compiled, args);
    }
    invokePartial(block) {
        let compiled = block.compile(this.env);
        this.pushFrame(compiled);
    }
    invokeLayout(args, layout, callerScope, component, manager, shadow) {
        this.pushComponentFrame(layout, args, callerScope, component, manager, shadow);
    }
    evaluateOperand(expr) {
        this.frame.setOperand(expr.evaluate(this));
    }
    evaluateArgs(args) {
        let evaledArgs = this.frame.setArgs(args.evaluate(this));
        this.frame.setOperand(evaledArgs.positional.at(0));
    }
    bindPositionalArgs(symbols) {
        let args = util_1.expect(this.frame.getArgs(), 'bindPositionalArgs assumes a previous setArgs');
        let { positional } = args;
        let scope = this.scope();
        for (let i = 0; i < symbols.length; i++) {
            scope.bindSymbol(symbols[i], positional.at(i));
        }
    }
    bindNamedArgs(names, symbols) {
        let args = util_1.expect(this.frame.getArgs(), 'bindNamedArgs assumes a previous setArgs');
        let scope = this.scope();
        let { named } = args;
        for (let i = 0; i < names.length; i++) {
            let name = this.constants.getString(names[i]);
            scope.bindSymbol(symbols[i], named.get(name));
        }
    }
    bindBlocks(names, symbols) {
        let blocks = this.frame.getBlocks();
        let scope = this.scope();
        for (let i = 0; i < names.length; i++) {
            let name = this.constants.getString(names[i]);
            scope.bindBlock(symbols[i], (blocks && blocks[name]) || null);
        }
    }
    bindPartialArgs(symbol) {
        let args = util_1.expect(this.frame.getArgs(), 'bindPartialArgs assumes a previous setArgs');
        let scope = this.scope();
        util_1.assert(args, "Cannot bind named args");
        scope.bindPartialArgs(symbol, args);
    }
    bindCallerScope() {
        let callerScope = this.frame.getCallerScope();
        let scope = this.scope();
        util_1.assert(callerScope, "Cannot bind caller scope");
        scope.bindCallerScope(callerScope);
    }
    bindDynamicScope(names) {
        let args = util_1.expect(this.frame.getArgs(), 'bindDynamicScope assumes a previous setArgs');
        let scope = this.dynamicScope();
        util_1.assert(args, "Cannot bind dynamic scope");
        for (let i = 0; i < names.length; i++) {
            let name = this.constants.getString(names[i]);
            scope.set(name, args.named.get(name));
        }
    }
}
exports.default = VM;
//# sourceMappingURL=data:application/json;base64,