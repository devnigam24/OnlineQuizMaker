"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const content = require("./content");
const vm = require("./vm");
const has_block_1 = require("../../compiled/expressions/has-block");
const util_1 = require("@glimmer/util");
const functions_1 = require("../../syntax/functions");
const expressions_1 = require("../expressions");
const compiler_1 = require("../../compiler");
class Labels {
    constructor() {
        this.labels = util_1.dict();
        this.jumps = [];
        this.ranges = [];
    }
    label(name, index) {
        this.labels[name] = index;
    }
    jump(at, Target, target) {
        this.jumps.push({ at, target, Target });
    }
    range(at, Range, start, end) {
        this.ranges.push({ at, start, end, Range });
    }
    patch(opcodes) {
        for (let i = 0; i < this.jumps.length; i++) {
            let { at, target, Target } = this.jumps[i];
            opcodes.set(at, Target, this.labels[target]);
        }
        for (let i = 0; i < this.ranges.length; i++) {
            let { at, start, end, Range } = this.ranges[i];
            opcodes.set(at, Range, this.labels[start], this.labels[end] - 1);
        }
    }
}
class BasicOpcodeBuilder {
    constructor(symbolTable, env, program) {
        this.symbolTable = symbolTable;
        this.env = env;
        this.program = program;
        this.labelsStack = new util_1.Stack();
        this.constants = env.constants;
        this.start = program.next;
    }
    get end() {
        return this.program.next;
    }
    get pos() {
        return this.program.current;
    }
    get nextPos() {
        return this.program.next;
    }
    opcode(name, op1, op2, op3) {
        this.push(name, op1, op2, op3);
    }
    push(type, op1 = 0, op2 = 0, op3 = 0) {
        this.program.push(type, op1, op2, op3);
    }
    // helpers
    get labels() {
        return util_1.expect(this.labelsStack.current, 'bug: not in a label stack');
    }
    startLabels() {
        this.labelsStack.push(new Labels());
    }
    stopLabels() {
        let label = util_1.expect(this.labelsStack.pop(), 'unbalanced push and pop labels');
        label.patch(this.program);
    }
    // partials
    putPartialDefinition(_definition) {
        let definition = this.constants.other(_definition);
        this.opcode(50 /* PutPartial */, definition);
    }
    putDynamicPartialDefinition() {
        this.opcode(49 /* PutDynamicPartial */, this.constants.other(this.symbolTable));
    }
    evaluatePartial() {
        this.opcode(51 /* EvaluatePartial */, this.constants.other(this.symbolTable), this.constants.other(util_1.dict()));
    }
    // components
    putComponentDefinition(definition) {
        this.opcode(23 /* PutComponent */, this.other(definition));
    }
    putDynamicComponentDefinition() {
        this.opcode(22 /* PutDynamicComponent */);
    }
    openComponent(args, shadow) {
        this.opcode(24 /* OpenComponent */, this.args(args), shadow ? this.block(shadow) : 0);
    }
    didCreateElement() {
        this.opcode(25 /* DidCreateElement */);
    }
    shadowAttributes() {
        this.opcode(26 /* ShadowAttributes */);
        this.opcode(21 /* CloseBlock */);
    }
    didRenderLayout() {
        this.opcode(27 /* DidRenderLayout */);
    }
    closeComponent() {
        this.opcode(28 /* CloseComponent */);
    }
    // content
    dynamicContent(Opcode) {
        this.opcode(31 /* DynamicContent */, this.other(Opcode));
    }
    cautiousAppend() {
        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());
    }
    trustingAppend() {
        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());
    }
    guardedCautiousAppend(expression) {
        this.dynamicContent(new content.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    guardedTrustingAppend(expression) {
        this.dynamicContent(new content.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    // dom
    text(text) {
        this.opcode(29 /* Text */, this.constants.string(text));
    }
    openPrimitiveElement(tag) {
        this.opcode(32 /* OpenElement */, this.constants.string(tag));
    }
    openComponentElement(tag) {
        this.opcode(35 /* OpenComponentElement */, this.constants.string(tag));
    }
    openDynamicPrimitiveElement() {
        this.opcode(36 /* OpenDynamicElement */);
    }
    flushElement() {
        this.opcode(37 /* FlushElement */);
    }
    closeElement() {
        this.opcode(38 /* CloseElement */);
    }
    staticAttr(_name, _namespace, _value) {
        let name = this.constants.string(_name);
        let namespace = _namespace ? this.constants.string(_namespace) : 0;
        let value = this.constants.string(_value);
        this.opcode(40 /* StaticAttr */, name, value, namespace);
    }
    dynamicAttrNS(_name, _namespace, trusting) {
        let name = this.constants.string(_name);
        let namespace = this.constants.string(_namespace);
        this.opcode(42 /* DynamicAttrNS */, name, namespace, trusting | 0);
    }
    dynamicAttr(_name, trusting) {
        let name = this.constants.string(_name);
        this.opcode(43 /* DynamicAttr */, name, trusting | 0);
    }
    comment(_comment) {
        let comment = this.constants.string(_comment);
        this.opcode(30 /* Comment */, comment);
    }
    modifier(_name, _args) {
        let args = this.constants.expression(this.compile(_args));
        let _modifierManager = this.env.lookupModifier(_name, this.symbolTable);
        let modifierManager = this.constants.other(_modifierManager);
        let name = this.constants.string(_name);
        this.opcode(41 /* Modifier */, name, modifierManager, args);
    }
    // lists
    putIterator() {
        this.opcode(44 /* PutIterator */);
    }
    enterList(start, end) {
        this.push(45 /* EnterList */);
        this.labels.range(this.pos, 45 /* EnterList */, start, end);
    }
    exitList() {
        this.opcode(46 /* ExitList */);
    }
    enterWithKey(start, end) {
        this.push(47 /* EnterWithKey */);
        this.labels.range(this.pos, 47 /* EnterWithKey */, start, end);
    }
    nextIter(end) {
        this.push(48 /* NextIter */);
        this.labels.jump(this.pos, 48 /* NextIter */, end);
    }
    // vm
    openBlock(_args, _inner) {
        let args = this.constants.expression(this.compile(_args));
        let inner = this.constants.other(_inner);
        this.opcode(20 /* OpenBlock */, inner, args);
    }
    closeBlock() {
        this.opcode(21 /* CloseBlock */);
    }
    pushRemoteElement() {
        this.opcode(33 /* PushRemoteElement */);
    }
    popRemoteElement() {
        this.opcode(34 /* PopRemoteElement */);
    }
    popElement() {
        this.opcode(39 /* PopElement */);
    }
    label(name) {
        this.labels.label(name, this.nextPos);
    }
    pushChildScope() {
        this.opcode(0 /* PushChildScope */);
    }
    popScope() {
        this.opcode(1 /* PopScope */);
    }
    pushDynamicScope() {
        this.opcode(2 /* PushDynamicScope */);
    }
    popDynamicScope() {
        this.opcode(3 /* PopDynamicScope */);
    }
    putNull() {
        this.opcode(4 /* Put */, this.constants.NULL_REFERENCE);
    }
    putValue(_expression) {
        let expr = this.constants.expression(this.compileExpression(_expression));
        this.opcode(5 /* EvaluatePut */, expr);
    }
    putArgs(_args) {
        let args = this.constants.expression(this.compile(_args));
        this.opcode(6 /* PutArgs */, args);
    }
    bindDynamicScope(_names) {
        this.opcode(12 /* BindDynamicScope */, this.names(_names));
    }
    bindPositionalArgs(_names, _symbols) {
        this.opcode(7 /* BindPositionalArgs */, this.names(_names), this.symbols(_symbols));
    }
    bindNamedArgs(_names, _symbols) {
        this.opcode(8 /* BindNamedArgs */, this.names(_names), this.symbols(_symbols));
    }
    bindBlocks(_names, _symbols) {
        this.opcode(9 /* BindBlocks */, this.names(_names), this.symbols(_symbols));
    }
    enter(enter, exit) {
        this.push(13 /* Enter */);
        this.labels.range(this.pos, 13 /* Enter */, enter, exit);
    }
    exit() {
        this.opcode(14 /* Exit */);
    }
    evaluate(_block) {
        let block = this.constants.block(_block);
        this.opcode(15 /* Evaluate */, block);
    }
    test(testFunc) {
        let _func;
        if (testFunc === 'const') {
            _func = vm.ConstTest;
        }
        else if (testFunc === 'simple') {
            _func = vm.SimpleTest;
        }
        else if (testFunc === 'environment') {
            _func = vm.EnvironmentTest;
        }
        else if (typeof testFunc === 'function') {
            _func = testFunc;
        }
        else {
            throw new Error('unreachable');
        }
        let func = this.constants.function(_func);
        this.opcode(19 /* Test */, func);
    }
    jump(target) {
        this.push(16 /* Jump */);
        this.labels.jump(this.pos, 16 /* Jump */, target);
    }
    jumpIf(target) {
        this.push(17 /* JumpIf */);
        this.labels.jump(this.pos, 17 /* JumpIf */, target);
    }
    jumpUnless(target) {
        this.push(18 /* JumpUnless */);
        this.labels.jump(this.pos, 18 /* JumpUnless */, target);
    }
    names(_names) {
        let names = _names.map(n => this.constants.string(n));
        return this.constants.array(names);
    }
    symbols(symbols) {
        return this.constants.array(symbols);
    }
    other(value) {
        return this.constants.other(value);
    }
    args(args) {
        return this.constants.expression(this.compile(args));
    }
    block(block) {
        return this.constants.block(block);
    }
}
exports.BasicOpcodeBuilder = BasicOpcodeBuilder;
function isCompilableExpression(expr) {
    return expr && typeof expr['compile'] === 'function';
}
class OpcodeBuilder extends BasicOpcodeBuilder {
    constructor(symbolTable, env, program = env.program) {
        super(symbolTable, env, program);
        this.component = new compiler_1.ComponentBuilder(this);
    }
    compile(expr) {
        if (isCompilableExpression(expr)) {
            return expr.compile(this);
        }
        else {
            return expr;
        }
    }
    compileExpression(expression) {
        if (expression instanceof expressions_1.CompiledExpression) {
            return expression;
        }
        else {
            return functions_1.expr(expression, this);
        }
    }
    bindPositionalArgsForLocals(locals) {
        let names = Object.keys(locals);
        let symbols = new Array(names.length); //Object.keys(locals).map(name => locals[name]);
        for (let i = 0; i < names.length; i++) {
            symbols[i] = locals[names[i]];
        }
        this.opcode(7 /* BindPositionalArgs */, this.symbols(symbols));
    }
    preludeForLayout(layout) {
        let symbols = layout.symbolTable.getSymbols();
        if (symbols.named) {
            let named = symbols.named;
            let namedNames = Object.keys(named);
            let namedSymbols = namedNames.map(n => named[n]);
            this.opcode(8 /* BindNamedArgs */, this.names(namedNames), this.symbols(namedSymbols));
        }
        this.opcode(11 /* BindCallerScope */);
        if (symbols.yields) {
            let yields = symbols.yields;
            let yieldNames = Object.keys(yields);
            let yieldSymbols = yieldNames.map(n => yields[n]);
            this.opcode(9 /* BindBlocks */, this.names(yieldNames), this.symbols(yieldSymbols));
        }
        if (symbols.partialArgs) {
            this.opcode(10 /* BindPartialArgs */, symbols.partialArgs);
        }
    }
    yield(args, to) {
        let yields, partial;
        let inner;
        if (yields = this.symbolTable.getSymbol('yields', to)) {
            inner = new has_block_1.CompiledGetBlockBySymbol(yields, to);
        }
        else if (partial = this.symbolTable.getPartialArgs()) {
            inner = new has_block_1.CompiledInPartialGetBlock(partial, to);
        }
        else {
            throw new Error('[BUG] ${to} is not a valid block name.');
        }
        this.openBlock(args, inner);
        this.closeBlock();
    }
    // TODO
    // come back to this
    labelled(args, callback) {
        if (args)
            this.putArgs(args);
        this.startLabels();
        this.enter('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.stopLabels();
    }
    // TODO
    // come back to this
    iter(callback) {
        this.startLabels();
        this.enterList('BEGIN', 'END');
        this.label('ITER');
        this.nextIter('BREAK');
        this.enterWithKey('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.jump('ITER');
        this.label('BREAK');
        this.exitList();
        this.stopLabels();
    }
    // TODO
    // come back to this
    unit(callback) {
        this.startLabels();
        callback(this);
        this.stopLabels();
    }
}
exports.default = OpcodeBuilder;
//# sourceMappingURL=data:application/json;base64,